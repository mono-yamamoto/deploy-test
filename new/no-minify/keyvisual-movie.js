(function ($) {
	/*
		2018-03-26	#4098 モーダルウィンドウ内の動画の埋め込み方法の変更
	*/

	'use strict';
	var $keyvisual_video = [];
	var _keyvisual_video_video = [];
	var $keyvisual_video_play = [];
	//var $keyvisual_video_ttl = [];
	var _brightcove_modal = [];
	var kh = 0;
	var hpc = 28.90625;
	var hsp = 97.22222222222222;
	var resizeEvent = 'resize';
	var clickEvent = 'click';

	if (navigator.userAgent.search(/iPhone|iPod|iPad/i) !== -1) {
		resizeEvent = 'orientationchange';
	}
	if (window.ontouchstart === null) {
		clickEvent = 'touchend';
	}

	document.addEventListener('DOMContentLoaded', mainProc ,false);

	function mainProc(){

		$keyvisual_video = $('.keyvisual_video');

		if ($keyvisual_video.length) {
			//$keyvisual_video_ttl = $('.keyvisual_video ._ttl');
			$keyvisual_video_play = $('.keyvisual_video ._play');
			_keyvisual_video_video = document.querySelector('.keyvisual_video video');
			_brightcove_modal = document.querySelector('._brightcove_modal');

			if (_brightcove_modal) { //#4098 
				$keyvisual_video_play.attr('data-embed', '_brightcove_modal');
				$keyvisual_video_play.modalVideo();
			} else if ($keyvisual_video_play.attr('data-embed') !== "") {
				$keyvisual_video_play.modalVideo();
			} else if ($keyvisual_video_play.attr('data-yutube') !== "") {
				var att = $keyvisual_video_play.attr('data-yutube');
				var attarr = att.split('/');
				$keyvisual_video_play.attr('data-video-id', attarr[attarr.length - 1]);
				$keyvisual_video_play.modalVideo();

			}

			window.addEventListener('load', function () {
				heightControl();
				$keyvisual_video.addClass('active');
				_keyvisual_video_video.play();
			});

			window.addEventListener(resizeEvent, function () {
				heightControl();
				modalPaddingControl();
				if (resizeEvent !== 'resize') {
					setTimeout(function () {
						heightControl();
						modalPaddingControl();
					}, 250);
				} else {
					heightControl();
					modalPaddingControl();
				}

			});

			$keyvisual_video_play.on(clickEvent, function () {
				setTimeout(function () {
					modalPaddingControl();
				}, 500);
			});

			// background movie controls
			var v = document.getElementById("keyvisual_video");
			var play = document.getElementsByClassName("keyvisual_pause");
			$('.keyvisual_pause').click(function () {
				if (v.paused) {
					v.play();
					$(play).removeClass("paused");
				} else {
					v.pause();
					$(play).addClass("paused");
				}
			});

		}
		
	}


	function heightControl() {
		if (window.matchMedia('(min-width:720px)').matches) {
			kh = $keyvisual_video.width() * (hpc / 100);
			$keyvisual_video.css('height', kh);
		} else if (window.matchMedia('(max-width:719px)').matches) {
			kh = $keyvisual_video.width() * (hsp / 100);
			$keyvisual_video.css('height', kh);
		}

		var ww = $keyvisual_video.width();
		var ttlw = _keyvisual_video_video.innerWidth;
		_keyvisual_video_video.style.left = (ww - ttlw) / 2;

	}

	function modalPaddingControl() {
		var _modalVideoBody = document.querySelector('.modal-video-body');
		if (_modalVideoBody  && !_brightcove_modal) { //#4098
			if (window.innerHeight > window.innerWidth) {
				_modalVideoBody.style.padding = 0; 
			} else {
				_modalVideoBody.style.padding = '50px'; 
			}
		}

	}

})(jQuery);


/**
 * Modules in this bundle
 * @license
 *
 * modal-video:
 *   license: appleple
 *   author: appleple
 *   homepage: http://developer.a-blogcms.jp
 *   version: 2.2.0
 *
 * es6-object-assign:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Rubén Norte <rubennorte@gmail.com>
 *   homepage: https://github.com/rubennorte/es6-object-assign
 *   version: 1.1.0
 *
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
(function e(t, n, r) {
	function s(o, u) {
		if (!n[o]) {
			if (!t[o]) {
				var a = typeof require == "function" && require;
				if (!u && a) return a(o, !0);
				if (i) return i(o, !0);
				var f = new Error("Cannot find module '" + o + "'");
				throw f.code = "MODULE_NOT_FOUND", f
			}
			var l = n[o] = {
				exports: {}
			};
			t[o][0].call(l.exports, function (e) {
				var n = t[o][1][e];
				return s(n ? n : e)
			}, l, l.exports, e, t, n, r)
		}
		return n[o].exports
	}
	var i = typeof require == "function" && require;
	for (var o = 0; o < r.length; o++) s(r[o]);
	return s
})({
	1: [function (require, module, exports) {
		/**
		 * Code refactored from Mozilla Developer Network:
		 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
		 */

		'use strict';

		function assign(target, firstSource) {
			if (target === undefined || target === null) {
				throw new TypeError('Cannot convert first argument to object');
			}

			var to = Object(target);
			for (var i = 1; i < arguments.length; i++) {
				var nextSource = arguments[i];
				if (nextSource === undefined || nextSource === null) {
					continue;
				}

				var keysArray = Object.keys(Object(nextSource));
				for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
					var nextKey = keysArray[nextIndex];
					var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
					if (desc !== undefined && desc.enumerable) {
						to[nextKey] = nextSource[nextKey];
					}
				}
			}
			return to;
		}

		function polyfill() {
			if (!Object.assign) {
				Object.defineProperty(Object, 'assign', {
					enumerable: false,
					configurable: true,
					writable: true,
					value: assign
				});
			}
		}

		module.exports = {
			assign: assign,
			polyfill: polyfill
		};

	}, {}],
	2: [function (require, module, exports) {
		'use strict';

		var ModalVideo = require('../index');

		var applyJQuery = function applyJQuery(jQuery) {
			jQuery.fn.modalVideo = function (settings) {
				if (typeof settings === 'strings') {} else {
					new ModalVideo(this, settings);
				}
				return this;
			};
		};

		if (typeof define === 'function' && define.amd) {
			define(['jquery'], applyJQuery);
		} else {
			var jq = window.jQuery ? window.jQuery : window.$;
			if (typeof jq !== 'undefined') {
				applyJQuery(jq);
			}
		}

		module.exports = applyJQuery;

	}, {
		"../index": 4
	}],
	3: [function (require, module, exports) {
		'use strict';

		Object.defineProperty(exports, "__esModule", {
			value: true
		});

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];
					descriptor.enumerable = descriptor.enumerable || false;
					descriptor.configurable = true;
					if ("value" in descriptor) descriptor.writable = true;
					Object.defineProperty(target, descriptor.key, descriptor);
				}
			}
			return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);
				if (staticProps) defineProperties(Constructor, staticProps);
				return Constructor;
			};
		}();

		var _util = require('../lib/util');

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var assign = require('es6-object-assign').assign;

		var defaults = {
			channel: 'youtube',
			youtube: {
				autoplay: 1,
				cc_load_policy: 1,
				color: null,
				controls: 1,
				disablekb: 0,
				enablejsapi: 0,
				end: null,
				fs: 1,
				h1: null,
				iv_load_policy: 1,
				list: null,
				listType: null,
				loop: 0,
				modestbranding: null,
				origin: null,
				playlist: null,
				playsinline: null,
				rel: 0,
				showinfo: 1,
				start: 0,
				wmode: 'transparent',
				theme: 'dark',
				nocookie: false
			},
			ratio: '16:9',
			vimeo: {
				api: false,
				autopause: true,
				autoplay: true,
				byline: true,
				callback: null,
				color: null,
				height: null,
				loop: false,
				maxheight: null,
				maxwidth: null,
				player_id: null,
				portrait: true,
				title: true,
				width: null,
				xhtml: false
			},
			allowFullScreen: true,
			animationSpeed: 300,
			classNames: {
				modalVideo: 'modal-video',
				modalVideoClose: 'modal-video-close',
				modalVideoBody: 'modal-video-body',
				modalVideoInner: 'modal-video-inner',
				modalVideoIframeWrap: 'modal-video-movie-wrap',
				modalVideoCloseBtn: 'modal-video-close-btn'
			},
			aria: {
				openMessage: 'You just openned the modal video',
				dismissBtnMessage: 'Close the modal by clicking here'
			}
		};

		var ModalVideo = function () {
			var embedCode = "";

			function ModalVideo(ele, option) {
				var _this = this;

				_classCallCheck(this, ModalVideo);

				var opt = assign({}, defaults, option);
				var selectors = typeof ele === 'string' ? document.querySelectorAll(ele) : ele;
				var body = document.querySelector('body');
				var classNames = opt.classNames;
				var speed = opt.animationSpeed;
				var _brightcoveModal = [];
				var _brightcoveModal_video = [];
				var _brightcoveModal_modalVideoWrapper = [];
				var _modalVideoCloseBtn = [];
				var _keyvisual_video_video = [];
				var _keyvisual_pause = [];
				
				_keyvisual_video_video = document.querySelector('.keyvisual_video video');
				if(_keyvisual_video_video){
					_keyvisual_pause =  document.querySelector('.keyvisual_pause');
				}

				[].forEach.call(selectors, function (selector) {

					if (selector.dataset.embed) {
						embedCode = selector.dataset.embed;
					}

					selector.addEventListener('click', function () {
						var videoId = selector.dataset.videoId;
						var channel = selector.dataset.channel || opt.channel;
						var id = (0, _util.getUniqId)();
						var videoUrl = _this.getVideoUrl(opt, channel, videoId);
						
						if(_keyvisual_pause){
							_keyvisual_video_video.pause();
						}

						if (embedCode !== '_brightcove_modal') {
							var html = _this.getHtml(opt, videoUrl, id);
							(0, _util.append)(body, html);
						} else {
							// #4098
							_brightcoveModal = document.querySelector('._brightcove_modal');
							
							_brightcoveModal.parentNode.style.position = 'relative';
							_brightcoveModal.parentNode.style.overflow = 'visible';
							
							_brightcoveModal.setAttribute('id', id);
							_brightcoveModal.classList.add('ready');
							_brightcoveModal_video = _brightcoveModal.querySelector('video');
							//_brightcoveModal_video.play();
							_modalVideoCloseBtn = document.querySelector('.modal-video-close-btn');
							_brightcoveModal_modalVideoWrapper = document.querySelector('.modal-video-wrapper');
							$('.modal-video-wrapper').append('<button class="modal-video-close-btn js-modal-video-dismiss-btn"></button>');
							_modalVideoCloseBtn = document.querySelector('.modal-video-close-btn');
							document.querySelector('.modal-video-wrapper div div').style.paddingTop = '56.25%';
							
							console.log(_keyvisual_video_video);
							_keyvisual_video_video.pause();

						}

						var modal = document.querySelector('#' + id);
						var btn = modal.querySelector('.js-modal-video-dismiss-btn');
						modal.focus();

						if (embedCode !== '_brightcove_modal') {

							modal.addEventListener('click', function () {
								setTimeout(function () {
									(0, _util.remove)(modal);
									selector.focus();
									if(_keyvisual_pause && _keyvisual_pause.className.indexOf('paused') ===-1){
										_keyvisual_video_video.play();
									}
								}, speed);
							});

							btn.addEventListener('click', function () {
								(0, _util.triggerEvent)(modal, 'click');
								if(_keyvisual_pause && _keyvisual_pause.className.indexOf('paused') ===-1){
									_keyvisual_video_video.play();
								}
							});

						} else {
							// #4098
							_brightcoveModal.addEventListener('click', function (e) {
								var eventClass = e.target.className;
								
								if(eventClass.search('modal-video') !==-1) {

								_brightcoveModal.classList.remove('ready');
								
								setTimeout(function () {
									_modalVideoCloseBtn.parentNode.removeChild(_modalVideoCloseBtn);
									_brightcoveModal_video.pause();
									_brightcoveModal_video.currentTime = 0;
									selector.focus();
									
									if(_keyvisual_pause && _keyvisual_pause.className.indexOf('paused') ===-1){
										_keyvisual_video_video.play();
									}
									
								}, speed);
								
								
								}
							});

						}

						modal.addEventListener('keydown', function (e) {
							if (e.which === 9) {
								e.preventDefault();
								if (document.activeElement === modal) {
									btn.focus();
								} else {
									modal.setAttribute('aria-label', '');
									modal.focus();
								}
							}
						});

					});
				});
			}

			_createClass(ModalVideo, [{

				key: 'getPadding',
				value: function getPadding(ratio) {
					var arr = ratio.split(':');
					var width = Number(arr[0]);
					var height = Number(arr[1]);
					var padding = height * 100 / width;
					return padding + '%';
				}
			}, {
				key: 'getQueryString',
				value: function getQueryString(obj) {
					var url = '';
					Object.keys(obj).forEach(function (key) {
						url += key + '=' + obj[key] + '&';
					});
					return url.substr(0, url.length - 1);
				}
			}, {
				key: 'getVideoUrl',
				value: function getVideoUrl(opt, channel, videoId) {
					if (channel === 'youtube') {
						return this.getYoutubeUrl(opt.youtube, videoId);
					} else if (channel === 'vimeo') {
						return this.getVimeoUrl(opt.vimeo, videoId);
					}
					return '';
				}
			}, {
				key: 'getVimeoUrl',
				value: function getVimeoUrl(vimeo, videoId) {
					var query = this.getQueryString(vimeo);
					return '//player.vimeo.com/video/' + videoId + '?' + query;
				}
			}, {
				key: 'getYoutubeUrl',
				value: function getYoutubeUrl(youtube, videoId) {
					var query = this.getQueryString(youtube);
					if (youtube.nocookie === true) {
						return '//www.youtube-nocookie.com/embed/' + videoId + '?' + query;
					}

					return '//www.youtube.com/embed/' + videoId + '?' + query;
				}
			}, {
				key: 'getHtml',
				value: function getHtml(opt, videoUrl, id) {
					var padding = this.getPadding(opt.ratio);
					var classNames = opt.classNames;

					if (embedCode) {
						return '\n      <div class="' + classNames.modalVideo + '" tabindex="-1" role="dialog" aria-label="' + opt.aria.openMessage + '" id="' + id + '">\n        <div class="' + classNames.modalVideoBody + '">\n          <div class="' + classNames.modalVideoInner + '">\n            <div class="' + classNames.modalVideoIframeWrap + '" style="padding-bottom:' + padding + '">\n              <button class="' + classNames.modalVideoCloseBtn + ' js-modal-video-dismiss-btn" aria-label="' + opt.aria.dismissBtnMessage + '"></button>\n              ' + embedCode + '\n            </div>\n          </div>\n        </div>\n      </div>\n    ';

					} else {
						return '\n      <div class="' + classNames.modalVideo + '" tabindex="-1" role="dialog" aria-label="' + opt.aria.openMessage + '" id="' + id + '">\n        <div class="' + classNames.modalVideoBody + '">\n          <div class="' + classNames.modalVideoInner + '">\n            <div class="' + classNames.modalVideoIframeWrap + '" style="padding-bottom:' + padding + '">\n              <button class="' + classNames.modalVideoCloseBtn + ' js-modal-video-dismiss-btn" aria-label="' + opt.aria.dismissBtnMessage + '"></button>\n              <iframe width=\'460\' height=\'230\' src="' + videoUrl + '" frameborder=\'0\' allowfullscreen=' + opt.allowFullScreen + ' tabindex="-1"/></iframe> \n           </div>\n          </div>\n        </div>\n      </div>\n    ';

					}
				}
			}]);

			return ModalVideo;
		}();

		exports.default = ModalVideo;
		module.exports = exports['default'];

	}, {
		"../lib/util": 5,
		"es6-object-assign": 1
	}],
	4: [function (require, module, exports) {
		'use strict';

		module.exports = require('./core/');

	}, {
		"./core/": 3
	}],
	5: [function (require, module, exports) {
		'use strict';

		Object.defineProperty(exports, "__esModule", {
			value: true
		});
		var append = exports.append = function append(element, string) {
			var parser = new DOMParser();
			var doc = parser.parseFromString(string, 'text/html');
			element.appendChild(doc.querySelector('body').childNodes[0]);
		};

		var prepend = exports.prepend = function prepend(element, string) {
			var parser = new DOMParser();
			var doc = parser.parseFromString(string, 'text/html');
			element.insertBefore(doc.querySelector('body').childNodes[0], element.firstChild);
		};

		var getUniqId = exports.getUniqId = function getUniqId() {
			return (Date.now().toString(36) + Math.random().toString(36).substr(2, 5)).toUpperCase();
		};

		var remove = exports.remove = function remove(element) {
			if (element && element.parentNode) {
				element.parentNode.removeChild(element);
			}
		};

		var addClass = exports.addClass = function addClass(element, className) {
			if (element.classList) {
				element.classList.add(className);
			} else {
				element.className += ' ' + className;
			}
		};

		var triggerEvent = exports.triggerEvent = function triggerEvent(el, eventName, options) {
			var event = void 0;
			if (window.CustomEvent) {
				event = new CustomEvent(eventName, {
					cancelable: true
				});
			} else {
				event = document.createEvent('CustomEvent');
				event.initCustomEvent(eventName, false, false, options);
			}
			el.dispatchEvent(event);
		};

	}, {}]
}, {}, [2]);
