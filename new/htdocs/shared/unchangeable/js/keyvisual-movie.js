(function keyvisualMovie () {
	/*
		2018-03-26	#4098 モーダルウィンドウ内の動画の埋め込み方法の変更
		2024-07-01 全体を非Query化
	*/

	

	let $keyvisualVideo = [];
	let keyvisualVideoVideo = [];
	let $keyvisualVideoPlay = [];
	// var $keyvisual_video_ttl = [];
	let brightcoveModal = [];
	let kh = 0;
	const hpc = 28.90625;
	const hsp = 97.2222222222222;
	let resizeEvent = 'resize';
	let clickEvent = 'click';

	if (navigator.userAgent.search(/iPhone|iPod|iPad/i) !== -1) {
		resizeEvent = 'orientationchange';
	}
	if (window.ontouchstart === null) {
		clickEvent = 'touchend';
	}

	function heightControl() {
		if (window.matchMedia('(min-width:720px)').matches) {
			$keyvisualVideo.forEach((item) => {
				const Item = item;
				kh = Item.offsetWidth * (hpc / 100);
				Item.style.height = `${kh}px`;
			});
		} else if (window.matchMedia('(max-width:719px)').matches) {
			$keyvisualVideo.forEach((item) => {
				const Item = item;
				kh = Item.offsetWidth * (hsp / 100);
				Item.style.height = `${kh}px`;
			});
		}

		const ww = $keyvisualVideo.offsetWidth;
		const ttlw = keyvisualVideoVideo.innerWidth;
		keyvisualVideoVideo.style.left = (ww - ttlw) / 2;
	}

	function modalPaddingControl() {
		const modalVideoBody = document.querySelector('.modal-video-body');
		if (modalVideoBody  && !brightcoveModal) { // #4098
			if (window.innerHeight > window.innerWidth) {
				modalVideoBody.style.padding = 0; 
			} else {
				modalVideoBody.style.padding = '50px'; 
			}
		}
	}

	function handleResizeEvent() {
		heightControl();
		modalPaddingControl();
		if (resizeEvent !== 'resize') {
			setTimeout(() => {
				heightControl();
				modalPaddingControl();
			}, 250);
		} else {
			heightControl();
			modalPaddingControl();
		}
	}

	function mainProc(){

		$keyvisualVideo = document.querySelectorAll('.keyvisual_video');

		if ($keyvisualVideo.length) {
			$keyvisualVideoPlay = document.querySelector('.keyvisual_video ._play');
			keyvisualVideoVideo = document.querySelector('.keyvisual_video video');
			brightcoveModal = document.querySelector('.brightcoveModal');

			window.addEventListener('load', () => {
				heightControl();
				$keyvisualVideo.forEach((item) => {
					item.classList.add('active');
				});
				keyvisualVideoVideo.play();
			});

			window.addEventListener(resizeEvent, handleResizeEvent);

			$keyvisualVideoPlay.addEventListener(clickEvent, () => {
				setTimeout(() => {
					modalPaddingControl();
				}, 500);
			});

			// background movie controls
			const v = document.getElementById("keyvisual_video");
			const plays = document.getElementsByClassName("keyvisual_pause");
			document.querySelectorAll('.keyvisual_pause').forEach((element) => {
				element.addEventListener('click', () => {
					if (v.paused) {
						v.play();
						Array.from(plays).forEach(play => play.classList.remove("paused"));
					} else {
						v.pause();
						Array.from(plays).forEach(play => play.classList.add("paused"));
					}
				});
			});
		}
	}

	document.addEventListener('DOMContentLoaded', mainProc ,false);
})();


/**
 * Modules in this bundle
 * @license
 *
 * modal-video:
 *   license: appleple
 *   author: appleple
 *   homepage: http://developer.a-blogcms.jp
 *   version: 2.2.0
 *
 * es6-object-assign:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Rubén Norte <rubennorte@gmail.com>
 *   homepage: https://github.com/rubennorte/es6-object-assign
 *   version: 1.1.0
 *
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
(function e(t, n, r) {
	const i = typeof require === "function" && require;
	const nnn = n
	function s(o, u) {
		if (!nnn[parseInt(o, 10)]) {
			let l = {
				exports: {}
			};
			nnn[parseInt(o, 10)] = l;
			l = nnn[parseInt(o, 10)]
			t[parseInt(o, 10)][0].call(l.exports, (event) => {
				const nn = t[parseInt(o, 10)][1][String(event)];
				return s(nn || event)
			}, l, l.exports, e, t, nnn, r)
			if (!t[parseInt(o, 10)]) {
				const a = typeof require === "function" && require;
				if (!u && a) {
return a(o, !0);
}
				if (i) {
return i(o, !0);
}
				const f = new Error(`Cannot find module '${  o  }'`);
				f.code = "MODULE_NOT_FOUND";
				throw f;
			}
		}
		return nnn[parseInt(o, 10)].exports
	}
	for (let o = 0; o < r.length; o += 1) {
s(r[parseInt(o, 10)]);
}
	return s
})({
	1: [function assignAndPolyfill (require, module) {
		/**
		 * Code refactored from Mozilla Developer Network:
		 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
		 */

		

		function assign(...args) {
			if (args[0] === undefined || args[0] === null) {
				throw new TypeError('Cannot convert first argument to object');
			}

			const to = Object(args[0]);
			for (let i = 1; i < args.length; i += 1) {
				const nextSource = args[parseInt(i, 10)];
				if (!(nextSource === undefined || nextSource === null)) {
					const keysArray = Object.keys(Object(nextSource));
					for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
						const nextKey = keysArray[String(nextIndex)];
						const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
						if (desc !== undefined && desc.enumerable) {
							to[String(nextKey)] = nextSource[String(nextKey)];
						}
					}
				}
			}
			return to;
		}

		function polyfill() {
			if (!Object.assign) {
				Object.defineProperty(Object, 'assign', {
					enumerable: false,
					configurable: true,
					writable: true,
					value: assign
				});
			}
		}

		const Module = module;
		
		Module.exports = { 
			assign,
			polyfill
		};

	}, {}],
	2: [function modalApply (require) {
		
		// これを削除するとモーダルが動かなくなる
		const ModalVideo = require('../index'); // eslint-disable-line

	}, {
		"../index": 4
	}],
	3: [function objectDefineProperty (require, module, exports) {
		

		Object.defineProperty(exports, "__esModule", {
			value: true
		});

		const createClass = function createClass () {
			function defineProperties(target, props) {
				for (let i = 0; i < props.length; i += 1) {
					const descriptor = props[parseInt(i, 10)];
					descriptor.enumerable = descriptor.enumerable || false;
					descriptor.configurable = true;
					if ("value" in descriptor) {
descriptor.writable = true;
}
					Object.defineProperty(target, descriptor.key, descriptor);
				}
			}
			return function define (Constructor, protoProps, staticProps) {
				if (protoProps) {
defineProperties(Constructor.prototype, protoProps);
}
				if (staticProps) {
defineProperties(Constructor, staticProps);
}
				return Constructor;
			};
		}();

		const Util = require('../lib/util'); // eslint-disable-line

		function classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		const {assign} = require('es6-object-assign'); // eslint-disable-line

		const defaults = {
			channel: 'youtube',
			youtube: {
				autoplay: 1,
				cc_load_policy: 1,
				color: null,
				controls: 1,
				disablekb: 0,
				enablejsapi: 0,
				end: null,
				fs: 1,
				h1: null,
				iv_load_policy: 1,
				list: null,
				listType: null,
				loop: 0,
				modestbranding: null,
				origin: null,
				playlist: null,
				playsinline: null,
				rel: 0,
				showinfo: 1,
				start: 0,
				wmode: 'transparent',
				theme: 'dark',
				nocookie: false
			},
			ratio: '16:9',
			vimeo: {
				api: false,
				autopause: true,
				autoplay: true,
				byline: true,
				callback: null,
				color: null,
				height: null,
				loop: false,
				maxheight: null,
				maxwidth: null,
				player_id: null,
				portrait: true,
				title: true,
				width: null,
				xhtml: false
			},
			allowFullScreen: true,
			animationSpeed: 300,
			classNames: {
				modalVideo: 'modal-video',
				modalVideoClose: 'modal-video-close',
				modalVideoBody: 'modal-video-body',
				modalVideoInner: 'modal-video-inner',
				modalVideoIframeWrap: 'modal-video-movie-wrap',
				modalVideoCloseBtn: 'modal-video-close-btn'
			},
			aria: {
				openMessage: 'You just openned the modal video',
				dismissBtnMessage: 'Close the modal by clicking here'
			}
		};

		const ModalVideo = function modalVideo () {
			let embedCode = "";

			const $keyvisualVideo = document.querySelectorAll('.keyvisual_video');

			if ($keyvisualVideo.length) {
				const $keyvisualVideoPlay = document.querySelector('.keyvisual_video ._play');
				const brightcoveModal = document.querySelector('.brightcoveModal');
				const $keyvisualVideoPlayAll = document.querySelectorAll('.keyvisual_video ._play');

				if (brightcoveModal) { // #4098 
					$keyvisualVideoPlayAll.forEach((item) => {
						item.setAttribute('data-embed', 'brightcoveModal');
					});
					new ModalMovie($keyvisualVideoPlayAll); // eslint-disable-line
				} else if ($keyvisualVideoPlay.getAttribute('data-embed') !== "") {
					new ModalMovie($keyvisualVideoPlayAll); // eslint-disable-line
				} else if ($keyvisualVideoPlay.getAttribute('data-yutube') !== "") {
					const att = $keyvisualVideoPlay.getAttribute('data-yutube');
					const attarr = att.split('/');
					$keyvisualVideoPlayAll.forEach((item) => {
						item.setAttribute('data-video-id', attarr[attarr.length - 1]);
					});
					new ModalMovie($keyvisualVideoPlayAll); // eslint-disable-line
				}
			}
			
			function ModalMovie(ele, option) {
				const This = this;

				classCallCheck(this, ModalMovie);

				const opt = assign({}, defaults, option);
				const selectors = typeof ele === 'string' ? document.querySelectorAll(ele) : ele;
				const body = document.querySelector('body');
				const speed = opt.animationSpeed;
				let brightcoveModal = [];
				let brightcoveModalVideo = [];
				let primaryModalVideoCloseBtn = [];
				let keyvisualVideoVideo = [];
				let keyvisualPause = [];
				
				keyvisualVideoVideo = document.querySelector('.keyvisual_video video');
				if(keyvisualVideoVideo){
					keyvisualPause =  document.querySelector('.keyvisual_pause');
				}

				[].forEach.call(selectors, (selector) => {

					if (selector.dataset.embed) {
						embedCode = selector.dataset.embed;
					}

					selector.addEventListener('click', () => {
						const {videoId} = selector.dataset;
						const channel = selector.dataset.channel || opt.channel;
						const id = (0, Util.getUniqId)();
						const videoUrl = This.getVideoUrl(opt, channel, videoId);
						
						if(keyvisualPause){
							keyvisualVideoVideo.pause();
						}

						if (embedCode !== 'brightcoveModal') {
							const html = This.getHtml(opt, videoUrl, id);
							(0, Util.append)(body, html);
						} else {
							// #4098
							brightcoveModal = document.querySelector('.brightcoveModal');
							
							brightcoveModal.parentNode.style.position = 'relative';
							brightcoveModal.parentNode.style.overflow = 'visible';
							
							brightcoveModal.setAttribute('id', id);
							brightcoveModal.classList.add('ready');
							brightcoveModalVideo = brightcoveModal.querySelector('video');
							// brightcoveModalVideo.play();
							primaryModalVideoCloseBtn = document.querySelector('.modal-video-close-btn');
							const modalVideoWrapper = document.querySelector('.modal-video-wrapper');
							const closeButton = document.createElement('button');
							closeButton.className = 'modal-video-close-btn js-modal-video-dismiss-btn';
							modalVideoWrapper.appendChild(closeButton);
							primaryModalVideoCloseBtn = document.querySelector('.modal-video-close-btn');
							document.querySelector('.modal-video-wrapper div div').style.paddingTop = '56.25%';
							
							keyvisualVideoVideo.pause();

						}

						const modal = document.querySelector(`#${  id}`);
						const btn = modal.querySelector('.js-modal-video-dismiss-btn');
						modal.focus();

						if (embedCode !== 'brightcoveModal') {

							modal.addEventListener('click', () => {
								setTimeout(() => {
									(0, Util.remove)(modal);
									selector.focus();
									if(keyvisualPause && keyvisualPause.className.indexOf('paused') ===-1){
										keyvisualVideoVideo.play();
									}
								}, speed);
							});

							btn.addEventListener('click', () => {
								(0, Util.triggerEvent)(modal, 'click');
								if(keyvisualPause && keyvisualPause.className.indexOf('paused') ===-1){
									keyvisualVideoVideo.play();
								}
							});

						} else {
							// #4098
							brightcoveModal.addEventListener('click', (e) => {
								const eventClass = e.target.className;
								
								if(eventClass.search('modal-video') !==-1) {

								brightcoveModal.classList.remove('ready');
								
								setTimeout(() => {
									primaryModalVideoCloseBtn.parentNode.removeChild(primaryModalVideoCloseBtn);
									brightcoveModalVideo.pause();
									brightcoveModalVideo.currentTime = 0;
									selector.focus();
									
									if(keyvisualPause && keyvisualPause.className.indexOf('paused') ===-1){
										keyvisualVideoVideo.play();
									}
									
								}, speed);
								
								
								}
							});

						}

						modal.addEventListener('keydown', (e) => {
							if (e.which === 9) {
								e.preventDefault();
								if (document.activeElement === modal) {
									btn.focus();
								} else {
									modal.setAttribute('aria-label', '');
									modal.focus();
								}
							}
						});

					});
				});
			}

			createClass(ModalMovie, [{

				key: 'getPadding',
				value: function getPadding(ratio) {
					const arr = ratio.split(':');
					const width = Number(arr[0]);
					const height = Number(arr[1]);
					const padding = height * 100 / width;
					return `${padding  }%`;
				}
			}, {
				key: 'getQueryString',
				value: function getQueryString(obj) {
					let url = '';
					Object.keys(obj).forEach((key) => {
						url += `${key  }=${  obj[parseInt(key, 10)]  }&`;
					});
					return url.substr(0, url.length - 1);
				}
			}, {
				key: 'getVideoUrl',
				value: function getVideoUrl(opt, channel, videoId) {
					if (channel === 'youtube') {
						return this.getYoutubeUrl(opt.youtube, videoId);
					} if (channel === 'vimeo') {
						return this.getVimeoUrl(opt.vimeo, videoId);
					}
					return '';
				}
			}, {
				key: 'getVimeoUrl',
				value: function getVimeoUrl(vimeo, videoId) {
					const query = this.getQueryString(vimeo);
					return `//player.vimeo.com/video/${  videoId  }?${  query}`;
				}
			}, {
				key: 'getYoutubeUrl',
				value: function getYoutubeUrl(youtube, videoId) {
					const query = this.getQueryString(youtube);
					if (youtube.nocookie === true) {
						return `//www.youtube-nocookie.com/embed/${  videoId  }?${  query}`;
					}

					return `//www.youtube.com/embed/${  videoId  }?${  query}`;
				}
			}, {
				key: 'getHtml',
				value: function getHtml(opt, videoUrl, id) {
					const padding = this.getPadding(opt.ratio);
					const {classNames} = opt;

					if (embedCode) {
						return `\n      <div class="${  classNames.modalVideo  }" tabindex="-1" role="dialog" aria-label="${  opt.aria.openMessage  }" id="${  id  }">\n        <div class="${  classNames.modalVideoBody  }">\n          <div class="${  classNames.modalVideoInner  }">\n            <div class="${  classNames.modalVideoIframeWrap  }" style="padding-bottom:${  padding  }">\n              <button class="${  classNames.modalVideoCloseBtn  } js-modal-video-dismiss-btn" aria-label="${  opt.aria.dismissBtnMessage  }"></button>\n              ${  embedCode  }\n            </div>\n          </div>\n        </div>\n      </div>\n    `;

					} 
						return `\n      <div class="${  classNames.modalVideo  }" tabindex="-1" role="dialog" aria-label="${  opt.aria.openMessage  }" id="${  id  }">\n        <div class="${  classNames.modalVideoBody  }">\n          <div class="${  classNames.modalVideoInner  }">\n            <div class="${  classNames.modalVideoIframeWrap  }" style="padding-bottom:${  padding  }">\n              <button class="${  classNames.modalVideoCloseBtn  } js-modal-video-dismiss-btn" aria-label="${  opt.aria.dismissBtnMessage  }"></button>\n              <iframe width='460' height='230' src="${  videoUrl  }" frameborder='0' allowfullscreen=${  opt.allowFullScreen  } tabindex="-1"/></iframe> \n           </div>\n          </div>\n        </div>\n      </div>\n    `;

					
				}
			}]);

			return ModalMovie;
		}();

		const Exports = exports
		const Module = module

		Exports.default = ModalVideo;
		Module.exports = exports.default;

	}, {
		"../lib/util": 5,
		"es6-object-assign": 1
	}],
	4: [function core (require, module) {
		const n = module
		n.exports = require("./core/"); // eslint-disable-line
	}, {
		"./core/": 3
	}],
	5: [function util (require, module, exports) {
		const Exports = exports
		

		Object.defineProperty(exports, "__esModule", {
			value: true
		});
		Exports.append = function append(element, string) {
			const parser = new DOMParser();
			const doc = parser.parseFromString(string, 'text/html');
			element.appendChild(doc.querySelector('body').childNodes[0]);
		};
		// const append = Exports.append;

		Exports.prepend = function prepend(element, string) {
			const parser = new DOMParser();
			const doc = parser.parseFromString(string, 'text/html');
			element.insertBefore(doc.querySelector('body').childNodes[0], element.firstChild);
		};

		Exports.getUniqId = function getUniqId() {
			return (Date.now().toString(36) + Math.random().toString(36).substr(2, 5)).toUpperCase();
		};

		Exports.remove = function remove(element) {
			if (element && element.parentNode) {
				element.parentNode.removeChild(element);
			}
		};

		Exports.addClass = function addClass(element, className) {
			const elem = element;
			if (elem.classList) {
				elem.classList.add(className);
			} else {
				elem.className += ` ${  className}`;
			}
		};

		Exports.triggerEvent = function triggerEvent(el, eventName, options) {
			let event
			if (window.CustomEvent) {
				event = new CustomEvent(eventName, {
					cancelable: true
				});
			} else {
				event = document.createEvent('CustomEvent');
				event.initCustomEvent(eventName, false, false, options);
			}
			el.dispatchEvent(event);
		};

	}, {}]
}, {}, [2]);
